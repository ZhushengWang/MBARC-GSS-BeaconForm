//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Measurement Studio.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPRL.TestPXI
{
    using System;
    using System.Runtime.InteropServices;


    public class AGN6030A : object, System.IDisposable
    {

        private System.IntPtr _handle;

        private bool _disposed = true;

        ~AGN6030A() { Dispose(false); }


        /// <summary>
        /// This function performs the following initialization actions:
        /// 
        /// - Creates a new IVI instrument driver session.
        /// 
        /// - Opens a session to the specified device using the interface and address you specify for the Resource Name parameter.
        /// 
        /// - If the ID Query parameter is set to VI_TRUE, this function queries the instrument ID and checks that it is valid for this instrument driver.
        /// 
        /// - If the Reset parameter is set to VI_TRUE, this function resets the instrument to a known state.
        /// 
        /// - Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver.
        /// 
        /// - Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Note:  This function creates a new session each time you invoke it. Although you can open more than one IVI session for the same resource, it is best not to do so.  You can use the same session in multiple program threads.  You can use the AGN6030A_LockSession and AGN6030A_UnlockSession functions to protect sections of code that require exclusive access to the resource.
        /// 
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// Pass the resource name of the device to initialize.
        /// 
        /// You can also pass the name of a virtual instrument or logical name that you configure with the IVI Configuration utility.  The virtual instrument identifies a specific device and specifies the initial settings for the session.  A logical Name identifies a particular virtual instrument.
        /// 
        /// Refer to the following table below for the exact grammar to use for this parameter.  Optional fields are shown in square brackets ([]).
        /// 
        /// Syntax
        /// ------------------------------------------------------
        /// PXI&lt;bus&gt;::&lt;device&gt;[::0]::INSTR
        /// &lt;LogicalName&gt;
        /// [VInstr-&gt;]&lt;VirtualInstrument&gt;
        /// 
        /// If you do not specify a value for an optional field, the following values are used:
        /// 
        /// Optional Field - Value
        /// ------------------------------------------------------
        /// function - 0
        /// 
        /// The following table contains example valid values for this parameter.
        /// 
        /// "Valid Value" - Description
        /// ------------------------------------------------------
        /// "PXI2::3::INSTR - PCI bus 2, device 3.
        /// "PXI4::13::0::INSTR - PCI bus 4, device 13.
        /// "SampleInstr" - Logical name "SampleInstr"
        /// "VInstr-&gt;xyz432" - Virtual Instrument "xyz432"
        /// "xyz432" - Logical Name or Virtual Instrument "xyz432"
        /// 
        /// Default Value:  "PXI2::12::INSTR"
        /// 
        /// Note: You specify the resource name with the "VInstr-&gt;" if you have the logical name that is the same as the virtual instrument name and you want to explicitly use the virtual instrument name. Otherwise, the driver uses the logical name.
        /// </param>
        /// <param name="ID_Query">
        /// Specify whether you want the instrument driver to perform an ID Query.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Perform ID Query (Default Value)
        /// VI_FALSE (0) - Skip ID Query
        /// 
        /// When you set this parameter to VI_TRUE, the driver verifies that the instrument you initialize is a type that this driver supports.  
        /// 
        /// Circumstances can arise where it is undesirable to send an ID Query command string to the instrument.  When you set this parameter to VI_FALSE, the function initializes the instrument without performing an ID Query.
        /// </param>
        /// <param name="Reset_Device">
        /// Specify whether you want the to reset the instrument during the initialization procedure.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Reset Device (Default Value)
        /// VI_FALSE (0) - Don't Reset
        /// 
        /// 
        /// </param>
        /// <param name="Instrument_Handle">
        /// Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Notes:
        /// 
        /// (1) This function creates a new session each time you invoke it.  This is useful if you have multiple physical instances of the same type of instrument.  
        /// 
        /// (2) Avoid creating multiple concurrent sessions to the same physical instrument.  Although you can create more than one IVI session for the same resource, it is best not to do so.  A better approach is to use the same IVI session in multiple execution threads.  You can use functions AGN6030A_LockSession and AGN6030A_UnlockSession to protect sections of code that require exclusive access to the resource.
        /// 
        /// 
        /// </param>
        public AGN6030A(string Resource_Name, bool ID_Query, bool Reset_Device)
        {
            int pInvokeResult = PInvoke.init(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), out this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// This function performs the following initialization actions:
        /// 
        /// - Creates a new IVI instrument driver and optionally sets the initial state of the following session attributes:
        /// 
        ///     AGN6030A_ATTR_RANGE_CHECK         
        ///     AGN6030A_ATTR_QUERY_INSTR_STATUS  
        ///     AGN6030A_ATTR_CACHE               
        ///     AGN6030A_ATTR_SIMULATE            
        ///     AGN6030A_ATTR_RECORD_COERCIONS    
        /// 
        /// - Opens a session to the specified device using the interface and address you specify for the Resource Name parameter.
        /// 
        /// - If the ID Query parameter is set to VI_TRUE, this function queries the instrument ID and checks that it is valid for this instrument driver.
        /// 
        /// - If the Reset parameter is set to VI_TRUE, this function resets the instrument to a known state.
        /// 
        /// - Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver.
        /// 
        /// - Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Note:  This function creates a new session each time you invoke it. Although you can open more than one IVI session for the same resource, it is best not to do so.  You can use the same session in multiple program threads.  You can use the AGN6030A_LockSession and AGN6030A_UnlockSession functions to protect sections of code that require exclusive access to the resource.
        /// 
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// Pass the resource name of the device to initialize.
        /// 
        /// You can also pass the name of a virtual instrument or logical name that you configure with the IVI Configuration utility.  The virtual instrument identifies a specific device and specifies the initial settings for the session.  A logical Name identifies a particular virtual instrument.
        /// 
        /// Refer to the following table below for the exact grammar to use for this parameter.  Optional fields are shown in square brackets ([]).
        /// 
        /// Syntax
        /// ------------------------------------------------------
        /// PXI&lt;bus&gt;::&lt;device&gt;[::0]::INSTR
        /// &lt;LogicalName&gt;
        /// [VInstr-&gt;]&lt;VirtualInstrument&gt;
        /// 
        /// If you do not specify a value for an optional field, the following values are used:
        /// 
        /// Optional Field - Value
        /// ------------------------------------------------------
        /// function - 0
        /// 
        /// The following table contains example valid values for this parameter.
        /// 
        /// "Valid Value" - Description
        /// ------------------------------------------------------
        /// "PXI2::3::INSTR - PCI bus 2, device 3.
        /// "PXI4::13::0::INSTR - PCI bus 4, device 13.
        /// "SampleInstr" - Logical name "SampleInstr"
        /// "VInstr-&gt;xyz432" - Virtual Instrument "xyz432"
        /// "xyz432" - Logical Name or Virtual Instrument "xyz432"
        /// 
        /// Default Value:  "PXI2::12::INSTR"
        /// 
        /// Note: You specify the resource name with the "VInstr-&gt;" if you have the logical name that is the same as the virtual instrument name and you want to explicitly use the virtual instrument name. Otherwise, the driver uses the logical name.
        /// </param>
        /// <param name="ID_Query">
        /// Specify whether you want the instrument driver to perform an ID Query.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Perform ID Query (Default Value)
        /// VI_FALSE (0) - Skip ID Query
        /// 
        /// When you set this parameter to VI_TRUE, the driver verifies that the instrument you initialize is a type that this driver supports.  
        /// 
        /// Circumstances can arise where it is undesirable to send an ID Query command string to the instrument.  When you set this parameter to VI_FALSE, the function initializes the instrument without performing an ID Query.
        /// </param>
        /// <param name="Reset_Device">
        /// Specify whether you want the to reset the instrument during the initialization procedure.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Reset Device (Default Value)
        /// VI_FALSE (0) - Don't Reset
        /// 
        /// 
        /// </param>
        /// <param name="Option_String">
        /// You can use this control to set the initial value of certain attributes for the session.  The following table lists the attributes and the name you use in this parameter to identify the attribute.
        /// 
        /// Name              Attribute Defined Constant   
        /// --------------------------------------------
        /// RangeCheck        AGN6030A_ATTR_RANGE_CHECK
        /// QueryInstrStatus  AGN6030A_ATTR_QUERY_INSTR_STATUS   
        /// Cache             AGN6030A_ATTR_CACHE   
        /// Simulate          AGN6030A_ATTR_SIMULATE  
        /// RecordCoercions   AGN6030A_ATTR_RECORD_COERCIONS
        /// 
        /// The format of this string is, "AttributeName=Value" where AttributeName is the name of the attribute and Value is the value to which the attribute will be set.  To set multiple attributes, separate their assignments with a comma.
        /// 
        /// If you pass NULL or an empty string for this parameter and a VISA resource descriptor for the Resource Name parameter, the session uses the default values for the attributes. The default values for the attributes are shown below:
        /// 
        ///     Attribute Name     Default Value
        ///     ----------------   -------------
        ///     RangeCheck         VI_TRUE
        ///     QueryInstrStatus   VI_TRUE
        ///     Cache              VI_TRUE
        ///     Simulate           VI_FALSE
        ///     RecordCoercions    VI_FALSE
        ///     
        /// 
        /// If you pass NULL or an empty string for this parameter and a virtual instrument or logical name for the Resource Name parameter, the session uses the values that you configure for virtual instrument or logical name with the IVI Configuration utility.
        /// 
        /// You can override the values of the attributes by assigning a value explicitly in a string you pass for this parameter.  You do not have to specify all of the attributes and may leave any of them out.  If you do not specify one of the attributes, its default value or the value that you configure with the IVI Configuration utility will be used.
        /// 
        /// The following are the valid values for ViBoolean attributes:
        /// 
        ///     True:     1, TRUE, or VI_TRUE
        ///     False:    0, False, or VI_FALSE
        /// 
        /// 
        /// Default Value:
        /// "Simulate=0,RangeCheck=1,QueryInstrStatus=1,Cache=1"
        /// 
        /// </param>
        /// <param name="Instrument_Handle">
        /// Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Notes:
        /// 
        /// (1) This function creates a new session each time you invoke it.  This is useful if you have multiple physical instances of the same type of instrument.  
        /// 
        /// (2) Avoid creating multiple concurrent sessions to the same physical instrument.  Although you can create more than one IVI session for the same resource, it is best not to do so.  A better approach is to use the same IVI session in multiple execution threads.  You can use functions AGN6030A_LockSession and AGN6030A_UnlockSession to protect sections of code that require exclusive access to the resource.
        /// 
        /// 
        /// </param>
        public AGN6030A(string Resource_Name, bool ID_Query, bool Reset_Device, string Option_String)
        {
            int pInvokeResult = PInvoke.InitWithOptions(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), Option_String, out this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// This function configures the operation mode of the function generator.  The operation mode determines how the function generator produces waveforms.  For example, you can select to generate waveforms continuously, or to generate a discrete number of waveform cycles when a trigger occurs.  
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Pass the channel name for which you want to configure the operation mode.
        /// 
        /// Valid Values: 1,2
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Operation_Mode">
        /// Pass the operation mode you want the function generator to use.  The driver sets the AGN6030A_ATTR_OPERATION_MODE attribute to this value.  The value you specify determines how the function generator produces output.
        /// 
        /// When you set this parameter to AGN6030A_VAL_OPERATE_CONTINUOUS, the function generator continuously produces an output signal.
        /// 
        /// When you set this parameter to AGN6030A_VAL_OPERATE_BURST, you use the following function to configure how the function generator produces waveform:
        /// 
        /// - AGN6030A_ConfigureBurstCount
        /// 
        /// In place of using this function, you can set the following attributes:
        /// 
        /// - AGN6030A_ATTR_BURST_COUNT    
        /// 
        /// Valid Values:
        /// AGN6030A_VAL_OPERATE_CONTINUOUS - Generate output continuously
        /// AGN6030A_VAL_OPERATE_BURST - Generate a burst of waveforms when a trigger occurs
        /// 
        /// Default Value:
        /// AGN6030A_VAL_OPERATE_CONTINUOUS - Generate output continuously
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureOperationMode(string Channel_Name, int Operation_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureOperationMode(this._handle, Channel_Name, Operation_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the output mode of the function generator.  The output mode determines the kind of waveform the function generator produces.  For example, you can select to output a standard waveform, an arbitrary waveform, or a sequence of arbitrary waveforms.  
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Output_Mode">
        /// Pass the output mode you want the function generator to use.  The driver sets the AGN6030A_ATTR_OUTPUT_MODE attribute to this value.  The value you specify determines which functions and attributes you use to configure the waveform the function generator produces.
        /// 
        /// When you set this parameter to AGN6030A_VAL_OUTPUT_ARB, you use the following functions to configure the waveform:
        /// 
        /// - AGN6030A_QueryArbWfmCapabilities
        /// - AGN6030A_CreateArbWaveform  
        /// - AGN6030A_ClearArbWaveform
        /// - AGN6030A_ConfigureSampleRate
        /// - AGN6030A_ConfigureArbWaveform 
        /// 
        /// In place of using the AGN6030A_ConfigureSampleRate and AGN6030A_ConfigureArbWaveform functions, you can set the following attributes:
        /// 
        /// - AGN6030A_ATTR_ARB_WAVEFORM_HANDLE  
        /// - AGN6030A_ATTR_ARB_GAIN
        /// - AGN6030A_ATTR_ARB_OFFSET  
        /// - AGN6030A_ATTR_ARB_SAMPLE_RATE 
        /// 
        /// When you set this parameter to AGN6030A_VAL_OUTPUT_SEQ, you use the following functions to configure the sequence:
        /// 
        /// - AGN6030A_QueryArbWfmCapabilities
        /// - AGN6030A_CreateArbWaveform  
        /// - AGN6030A_ClearArbWaveform
        /// - AGN6030A_QueryArbSeqCapabilities
        /// - AGN6030A_CreateArbWaveform
        /// - AGN6030A_ClearArbSequence
        /// - AGN6030A_ClearArbMemory
        /// - AGN6030A_ConfigureSampleRate
        /// - AGN6030A_ConfigureArbSequence
        /// 
        /// In place of using the AGN6030A_ConfigureSampleRate and AGN6030A_ConfigureArbSequence functions, you can set the following attributes:
        /// 
        /// - AGN6030A_ATTR_ARB_SEQUENCE_HANDLE  
        /// - AGN6030A_ATTR_ARB_GAIN
        /// - AGN6030A_ATTR_ARB_OFFSET  
        /// - AGN6030A_ATTR_ARB_SAMPLE_RATE 
        /// 
        /// Valid Values:
        /// AGN6030A_VAL_OUTPUT_ARB  - Arbitrary Waveform Output
        /// AGN6030A_VAL_OUTPUT_SEQ  - Arbitrary Sequence output
        ///  
        /// Default Value:
        /// AGN6030A_VAL_OUTPUT_ARB - Arbitrary Waveform Output
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureOutputMode(int Output_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureOutputMode(this._handle, Output_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines the kind of electrical output generated by the function generator.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Pass the channel name for which you want to set the output impedance.
        /// 
        /// Valid Values: 1,2
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Output_Configuration">
        /// Use this control to determine the kind of electrical output generated by the N6030. There are three possible settings. The driver sets the AGN6030A_ATTR_OUTPUT_CONFIGURATION attribute to this value.
        /// 
        /// Using the Differential value configures a differential electrical output, using both the plus (+) and minus (-) output ports. The output gain is specified as the voltage difference between the two channels.
        /// 
        /// Selecting the Single Ended mode enables only the plus (+) output port. Output gain is specified as the voltage between the plus output port and ground.
        /// 
        /// Amplified mode is also a single-ended mode, but with a voltage amplification of 2:1.
        /// 
        /// All modes feature DC-coupled outputs. 
        /// 
        /// Valid Values:
        /// AGN6030A_VAL_CONFIGURATION_DIFFERENTIAL - Differential
        /// AGN6030A_VAL_CONFIGURATION_SINGLE_ENDED - Single Ended
        /// AGN6030A_VAL_CONFIGURATION_AMPLIFIED - Amplified
        /// 
        /// Default Value:
        /// AGN6030A_VAL_CONFIGURATION_DIFFERENTIAL
        /// 
        /// 
        /// </param>
        /// <param name="Output_Filter_Enabled">
        /// The boolean attribute, AGN6030A_ATTR_OUTPUT_FILTER_ENABLED attribute controls the application of a low pass filter to the electrical output ports. 
        /// 
        /// Valid Values:
        /// VI_FALSE - The low pass filter is bypassed.
        /// VI_TRUE  - The low pass filter is enabled.
        /// 
        /// Default Value:
        /// VI_TRUE
        /// 
        /// </param>
        /// <param name="Output_Filter_Bandwidth">
        /// This attribute allows selection of the cutoff frequency for the low-pass reconstruction filter. Only two values are available, 250MHz and 500MHz. Values are specified in Hz and must exactly match one of the available values, or an error will occur.
        /// 
        /// Valid Values:
        /// 250e6 - 250MHz
        /// 500e6 - 500MHz
        /// 
        /// Default Value:
        /// 500e+6
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureOutputConfiguration(string Channel_Name, int Output_Configuration, bool Output_Filter_Enabled, double Output_Filter_Bandwidth)
        {
            int pInvokeResult = PInvoke.ConfigureOutputConfiguration(this._handle, Channel_Name, Output_Configuration, System.Convert.ToUInt16(Output_Filter_Enabled), Output_Filter_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the function generator's reference clock source.  The function generator uses the reference clock to derive frequencies and sample rates when generating output.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Reference_Clock_Source">
        /// Pass the reference clock source you want the function generator to use.  The driver sets the AGN6030A_ATTR_REF_CLOCK_SOURCE attribute to this value.
        /// 
        /// The function generator derives the frequencies and sample rates that it uses to generate waveforms from the source you specify.  For example, when you set this parameter to AGN6030A_VAL_REF_CLOCK_EXTERNAL, the function generator uses
        /// the signal it receives at its external clock terminal as its reference clock.
        /// 
        /// Valid Values:
        /// AGN6030A_VAL_REF_CLOCK_INTERNAL - internal clock source
        /// AGN6030A_VAL_REF_CLOCK_EXTERNAL - external clock source
        /// AGN6030A_VAL_REF_CLOCK_PXI      - PXI backplane clock source
        /// 
        /// Default Value: 
        /// AGN6030A_VAL_REF_CLOCK_PXI - internal clock source
        /// 
        /// Selecting the internal clock source is essentially equivalent to having no reference clock. 
        /// 
        /// Compact PCI chassis do not have a 10MHz backplane reference clock.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureRefClockSource(int Reference_Clock_Source)
        {
            int pInvokeResult = PInvoke.ConfigureRefClockSource(this._handle, Reference_Clock_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the function generator's reference clock source and frequency.  The function generator uses the reference clock to derive frequencies and sample rates when generating output.
        /// 
        /// Special procedures are necessary when enabling an external sample clock. Refer to the users manual for more information.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Sample_Clock_Source">
        /// Pass the sample clock source you want the function generator to use.  The driver sets the AGN6030A_ATTR_CLOCK_SOURCE attribute to this value.
        /// 
        /// The function generator clocks waveform samples from the source you specify.  For example, when you set this parameter to AGN6030A_VAL_CLOCK_EXTERNAL, the function generator uses
        /// the signal it receives at its EXT CLK IN terminal as its sample clock.
        /// 
        /// Users must be careful when using an external sample clock. Providing an unstable, noisy or intermittent clock may cause I/O problems and errors to occur when operating the N6030A. Refer to the users manual for more information.
        /// 
        /// Valid Values:
        /// AGN6030A_VAL_CLOCK_INTERNAL - internal clock source
        /// AGN6030A_VAL_CLOCK_EXTERNAL - external clock source
        /// 
        /// Default Value: 
        /// AGN6030A_VAL_CLOCK_INTERNAL - internal clock source
        /// 
        /// </param>
        /// <param name="Sample_Clock_Frequency">
        /// Specifies sample clock frequency in Hertz.
        /// 
        /// Valid Range: 78.125e6 to 1250e6
        /// 
        /// Default Value: 1250e6
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureSampleClock(int Sample_Clock_Source, double Sample_Clock_Frequency)
        {
            int pInvokeResult = PInvoke.ConfigureSampleClock(this._handle, Sample_Clock_Source, Sample_Clock_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the output impedance for the channel you specify.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Pass the channel name for which you want to set the output impedance.
        /// 
        /// Valid Values: 1,2
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Impedance">
        /// Pass the impedance value you want the function generator to use.  The driver sets the AGN6030A_ATTR_OUTPUT_IMPEDANCE attribute to this value.  A value of 0.0 indicates that the function generator is connected to a high impedance load.
        /// 
        /// Units: Ohms
        /// Valid Values:
        /// 50.0, 75.0, 0.0 Ohms
        /// 
        /// Default Value:
        /// 50.0 Ohms
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureOutputImpedance(string Channel_Name, double Impedance)
        {
            int pInvokeResult = PInvoke.ConfigureOutputImpedance(this._handle, Channel_Name, Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the function generator's output.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Pass the channel name for which you want to enable or disable the output.
        /// 
        /// Valid Values: 1,2
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Enabled">
        /// Pass whether you want to enable or disable the output.  The driver uses this value to set the AGN6030A_ATTR_OUTPUT_ENABLED attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable the output  (Default)
        /// VI_FALSE - Disable the output
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureOutputEnabled(string Channel_Name, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureOutputEnabled(this._handle, Channel_Name, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the arb to operate as either a master or slave when multiple N6030 modules are operated synchronously. There can only be one master; all other modules must be configured as slaves. This function is currently not supported.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Clock_Synchronization_Enabled">
        /// Pass the clock synchronization state you want the function generator to use.  The driver sets the AGN6030A_ATTR_SYNC_ENABLED attribute to this value.
        /// 
        /// When multiple N6030 modules are operated synchronously, this attribute must be set to VI_TRUE.
        /// 
        /// This function is currently not supported.
        /// 
        /// Valid Values:
        /// VI_FALSE - The arb operates independently.
        /// VI_TRUE  - The arb is synchronized with other arbs in the system.
        /// 
        /// Default Value: 
        /// VI_FALSE
        /// </param>
        /// <param name="Synchronization_Mode">
        /// Pass the clock synchronization mode you want the function generator to use.  The driver sets the AGN6030A_ATTR_SYNC_MODE attribute to this value.
        /// 
        /// When multiple N6030 modules are operated synchronously, this attribute must be set to AGN6030A_VAL_SYNC_MASTER for one arb within the system. All other arbs must be set to AGN6030A_VAL_SYNC_SLAVE.
        /// 
        /// This function is currently not supported.
        /// 
        /// Valid Values:
        /// AGN6030A_VAL_SYNC_MASTER - This arb is the sync master.
        /// AGN6030A_VAL_SYNC_SLAVE  - This arb is a sync slave.
        /// 
        /// Default Value: 
        /// AGN6030A_VAL_SYNC_MASTER
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureClockSync(bool Clock_Synchronization_Enabled, int Synchronization_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureClockSync(this._handle, System.Convert.ToUInt16(Clock_Synchronization_Enabled), Synchronization_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the sample rate attribute, which determines the rate at which the function generator produces arbitrary waveforms.  When you configure the function generator to produce an arbitrary sequence, this is the sample rate for all arbitrary waveforms in the sequence.
        ///   
        /// Notes:
        /// 
        /// (1) You must set the output mode to AGN6030A_VAL_OUTPUT_ARB or AGN6030A_VAL_OUTPUT_SEQ before calling this function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Sample_Rate__Samp_s_">
        /// Pass the sample rate at which you want the function generator to output arbitrary waveforms.  The driver sets the AGN6030A_ATTR_ARB_SAMPLE_RATE attribute to this value. 
        /// 
        /// Units: Samples-per-Second (Samp/s)
        /// 
        /// Only a discrete set of values are available for this attribute. The maximum value is always equal to the current setting of the AGN6030A_ATTR_CLOCK_FREQUENCY attribute. Other values are available in ocatve steps below this frequency. For example, if the current clock frequency is 1024MHz, valid sample rates (in M-Samp/s) are 1024, 512, 256, 128, 64,... down to a minimum value that must be queried from the driver.
        /// 
        /// Default Value: the setting of AGN6030A_ATTR_CLOCK_FREQUENCY
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureSampleRate(double Sample_Rate__Samp_s_)
        {
            int pInvokeResult = PInvoke.ConfigureSampleRate(this._handle, Sample_Rate__Samp_s_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the attributes of the function generator that are related to creating arbitrary waveforms.  These attributes are the maximum number of waveforms, waveform quantum, minimum waveform size, and maximum waveform size.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Maximum_Number_of_Waveforms">
        /// Returns the maximum number of arbitrary waveforms that the function generator allows.  The driver obtains this value from the AGN6030A_ATTR_MAX_NUM_WAVEFORMS attribute.
        /// 
        /// Notes:
        /// 
        /// (1) If you do not want to obtain the maximum number of waveforms, pass a value of VI_NULL for this parameter. 
        /// 
        /// </param>
        /// <param name="Waveform_Quantum">
        /// The size (i.e. number of points) of each waveform must be a multiple of a constant quantum value.  This parameter obtains the quantum value the function generator uses.  The driver returns this value from the AGN6030A_ATTR_WAVEFORM_QUANTUM attribute.  For example,  when this attribute returns a value of 8, all waveform sizes must be a multiple of 8.
        /// 
        /// </param>
        /// <param name="Minimum_Waveform_Size">
        /// Returns the minimum number of points the function generator allows in a waveform.  The driver obtains this value from the AGN6030A_ATTR_MIN_WAVEFORM_SIZE attribute.  
        /// 
        /// Notes:
        /// 
        /// (1) If you do not want to obtain the minimum waveform size, pass a value of VI_NULL for this parameter. 
        /// 
        /// </param>
        /// <param name="Maximum_Waveform_Size">
        /// Returns the maximum number of points the function generator allows in a waveform.  The driver obtains this value from the AGN6030A_ATTR_MAX_WAVEFORM_SIZE attribute.
        /// 
        /// Notes:
        /// 
        /// (1) If you do not want to obtain the maximum waveform size, pass a value of VI_NULL for this parameter. 
        ///  
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int QueryArbWfmCapabilities(out int Maximum_Number_of_Waveforms, out int Waveform_Quantum, out int Minimum_Waveform_Size, out int Maximum_Waveform_Size)
        {
            int pInvokeResult = PInvoke.QueryArbWfmCapabilities(this._handle, out Maximum_Number_of_Waveforms, out Waveform_Quantum, out Minimum_Waveform_Size, out Maximum_Waveform_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates an arbitrary waveform and returns a handle that identifies that waveform.  You pass this handle to the AGN6030A_ConfigureArbWaveform function to produce that waveform.  You also use the handles this function returns to specify a sequence of arbitrary waveforms with the AGN6030A_CreateArbSequence function.
        /// 
        /// Notes:
        /// 
        /// (1) You must set the output mode to AGN6030A_VAL_OUTPUT_ARB before calling this function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Waveform_Size">
        /// Pass the size of the arbitrary waveform you want create.
        /// 
        /// The size must meet the following restrictions:
        /// 
        ///     - The size is less than or equal to the maximum waveform size the instrument allows.
        /// 
        ///     - The size is greater than or equal to the minimum waveform size the instrument allows.
        /// 
        ///     - The size is an integer multiple of the instrument's waveform quantum.
        /// 
        ///     You can obtain these values from the Maximum Waveform Size, Minimum Waveform Size, and Waveform Quantum parameters of the AGN6030A_QueryArbWfmCapabilities function.
        /// 
        /// Minimum waveform size is 128 samples.
        /// Maximum waveform size is determined by the amount of memory installed in the arb. Typically this is either 8M or 16M samples.
        /// 
        /// The waveform quantum is 16 samples.
        /// 
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Waveform_Data_Array">
        /// Specify the array of data you want to use for the new arbitrary waveform.  The array must have at least as many elements as the value you specify in the Waveform Size parameter.
        /// 
        /// You must normalize the data points in the array to be between -1.00 and +1.00.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Waveform_Handle">
        /// Returns the handle that identifies the new arbitrary waveform.  You pass this handle to the AGN6030A_ConfigureArbWaveform function to generate the arbitrary waveform.  You pass an array of these handles to the AGN6030A_CreateArbSequence function to create an arbitrary sequence.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4006  Out of memory.
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int CreateArbWaveform(int Waveform_Size, double[] Waveform_Data_Array, out int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.CreateArbWaveform(this._handle, Waveform_Size, Waveform_Data_Array, out Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates an arbitrary waveform and returns a handle that identifies that waveform.  You pass this handle to the AGN6030A_ConfigureArbWaveform function to produce that waveform.  You also use the handles this function returns to specify a sequence of arbitrary waveforms with the AGN6030A_CreateArbSequence function.
        /// 
        /// Notes:
        /// 
        /// (1) You must set the output mode to AGN6030A_VAL_OUTPUT_ARB before calling this function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Waveform_Size">
        /// Pass the size of the arbitrary waveform you want create.
        /// 
        /// The size must meet the following restrictions:
        /// 
        ///     - The size is less than or equal to the maximum waveform size the instrument allows.
        /// 
        ///     - The size is greater than or equal to the minimum waveform size the instrument allows.
        /// 
        ///     - The size is an integer multiple of the instrument's waveform quantum.
        /// 
        ///     You can obtain these values from the Maximum Waveform Size, Minimum Waveform Size, and Waveform Quantum parameters of the AGN6030A_QueryArbWfmCapabilities function.
        /// 
        /// Minimum waveform size is 128 samples.
        /// Maximum waveform size is determined by the amount of memory installed in the arb. Typically this is either 8M or 16M samples.
        /// 
        /// The waveform quantum is 16 samples.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Waveform_Data_Array">
        /// Specify the array of data you want to use for the new arbitrary waveform.  The array must have at least as many elements as the value you specify in the Waveform Size parameter.
        /// 
        /// You must normalize the data points in the array to be between -1.00 and +1.00.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Marker_Size">
        /// Pass the size of the marker data array.
        /// 
        /// The size must be exactly one eighth (1/8) of the waveform size. One marker signal is generated for each 8 waveform samples.
        /// 
        /// Valid Values: Exactly 1/8 of the waveform size.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Marker_Data_Array">
        /// Specify the array of data you want to use for the new arbitrary waveform.  The array must have at least as many elements as the value you specify in the Waveform Size parameter.
        /// 
        /// You must normalize the data points in the array to be between -1.00 and +1.00.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Waveform_Handle">
        /// Returns the handle that identifies the new arbitrary waveform.  You pass this handle to the AGN6030A_ConfigureArbWaveform function to generate the arbitrary waveform.  You pass an array of these handles to the AGN6030A_CreateArbSequence function to create an arbitrary sequence.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4006  Out of memory.
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int CreateArbWaveformWithMarkers(int Waveform_Size, double[] Waveform_Data_Array, int Marker_Size, string Marker_Data_Array, out int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.CreateArbWaveformWithMarkers(this._handle, Waveform_Size, Waveform_Data_Array, Marker_Size, Marker_Data_Array, out Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates an arbitrary waveform and returns a handle that identifies that waveform.  You pass this handle to the AGN6030A_ConfigureArbWaveform function to produce that waveform.  You also use the handles this function returns to specify a sequence of arbitrary waveforms with the AGN6030A_CreateArbSequence function.
        /// 
        /// Notes:
        /// 
        /// (1) You must set the output mode to AGN6030A_VAL_OUTPUT_ARB before calling this function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Waveform_Size">
        /// Pass the size of the arbitrary waveform you want create.
        /// 
        /// The size must meet the following restrictions:
        /// 
        ///     - The size is less than or equal to the maximum waveform size the instrument allows.
        /// 
        ///     - The size is greater than or equal to the minimum waveform size the instrument allows.
        /// 
        ///     - The size is an integer multiple of the instrument's waveform quantum.
        /// 
        ///     You can obtain these values from the Maximum Waveform Size, Minimum Waveform Size, and Waveform Quantum parameters of the AGN6030A_QueryArbWfmCapabilities function.
        /// 
        /// Minimum waveform size is 128 samples.
        /// Maximum waveform size is determined by the amount of memory installed in the arb. Typically this is either 8M or 16M samples.
        /// 
        /// The waveform quantum is 16 samples.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Waveform_Data_Array">
        /// Specify the array of data you want to use for the new arbitrary waveform.  The array must have at least as many elements as the value you specify in the Waveform Size parameter.
        /// 
        /// You must normalize the data points in the array to be between -1.00 and +1.00.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Marker_Size">
        /// Pass the size of the marker data array.
        /// 
        /// The size must be exactly one eighth (1/8) of the waveform size. One marker signal is generated for each 8 waveform samples.
        /// 
        /// Valid Values: Exactly 1/8 of the waveform size.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Marker_Data_Array">
        /// Specify the array of data you want to use for the new arbitrary waveform.  The array must have at least as many elements as the value you specify in the Waveform Size parameter.
        /// 
        /// You must normalize the data points in the array to be between -1.00 and +1.00.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Waveform_Handle">
        /// Returns the handle that identifies the new arbitrary waveform.  You pass this handle to the AGN6030A_ConfigureArbWaveform function to generate the arbitrary waveform.  You pass an array of these handles to the AGN6030A_CreateArbSequence function to create an arbitrary sequence.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4006  Out of memory.
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int CreateArbWaveformRaw(int Waveform_Size, short[] Waveform_Data_Array, int Marker_Size, string Marker_Data_Array, out int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.CreateArbWaveformRaw(this._handle, Waveform_Size, Waveform_Data_Array, Marker_Size, Marker_Data_Array, out Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the attributes of the function generator that affect arbitrary waveform generation.  These attributes are the arbitrary waveform handle, gain, and offset.
        /// 
        /// Notes:
        /// 
        /// (1) You must set the output mode to AGN6030A_VAL_OUTPUT_ARB before calling this function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Pass the channel name for which you want to configure an arbitrary waveform.
        /// 
        /// Valid Channel Names: 1,2
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Waveform_Handle">
        /// Pass the handle of the arbitrary waveform you want the function generator to produce.  The driver sets the AGN6030A_ATTR_ARB_WAVEFORM_HANDLE attribute to this value.  You create an arbitrary waveform using the AGN6030A_CreateArbWaveform function.  The AGN6030A_CreateArbWaveform function returns a handle that you use to identify the waveform.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Gain__V_">
        /// Specifies the factor by which the function generator scales the arbitrary waveform data.  When you create arbitrary waveforms, you must first normalize the data points to a range of -1.00 to +1.00.  You use this attribute to scale the arbitrary waveform to other ranges.  The driver sets the AGN6030A_ATTR_ARB_GAIN attribute to this value.    For example, to configure the output signal to range from -2.00 volts to +2.00 volts, set the Gain to 2.00.
        /// 
        /// 
        /// Units: Volts (V)
        /// 
        /// Valid Range: 0.340 to 0.500 (V) in differential and amplified output modes. 0.170 to 0.250 (V) in single ended output mode.
        /// 
        /// Default Value: 0.340 (V)
        /// 
        /// </param>
        /// <param name="Offset__V_">
        /// Specifies the value the function generator adds to the arbitrary waveform data.  When you create arbitrary waveforms, you must first normalize the data points to a range of -1.00 to +1.00.  You use this parameter to shift the arbitrary waveform's range.  The driver sets the AGN6030A_ATTR_ARB_OFFSET attribute to this value.  For example,  to configure the output signal to range from 0.00 volts to 2.00 volts instead of -1.00 volts to 1.00 volts, set the Offset to 1.00.
        /// 
        /// Units: Volts (V)
        /// 
        /// Valid Range:  is heavily dependent on the current output configuration and gain settings. Use the AGN6030A_ATTR_ARB_OFFSET_MIN/MAX attributes to query the current valid range for this attribute.
        /// 
        /// Default Value: 0.00 (V)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4001  Invalid waveform handle.
        /// BFFA4003  Wrong channel for waveform.
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4006  Out of memory.
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureArbWaveform(string Channel_Name, int Waveform_Handle, double Gain__V_, double Offset__V_)
        {
            int pInvokeResult = PInvoke.ConfigureArbWaveform(this._handle, Channel_Name, Waveform_Handle, Gain__V_, Offset__V_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function removes a previously created arbitrary waveform from the function generator's memory and invalidates the waveform's handle.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Waveform_Handle">
        /// Pass the handle of the arbitrary waveform you want the function generator to remove.  You create multiple arbitrary waveforms using the AGN6030A_CreateArbWaveform function.  The AGN6030A_CreateArbWaveform function returns a handle that you use to identify each waveform.
        /// 
        /// Defined Values:
        /// AGN6030A_VAL_ALL_WAVEFORMS - Remove all waveforms from the function generator.
        ///     
        /// Default Value: None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4001  Invalid waveform handle.
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ClearArbWaveform(int Waveform_Handle)
        {
            int pInvokeResult = PInvoke.ClearArbWaveform(this._handle, Waveform_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the value of a ViInt32 attribute.
        /// 
        /// You can use this function to get the values of instrument-specific attributes and inherent IVI attributes.  If the attribute represents an instrument state, this function performs instrument I/O in the following cases:
        /// 
        /// - State caching is disabled for the entire session or for the particular attribute.
        /// 
        /// - State caching is enabled and the currently cached value is invalid. 
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Waveform_Handle">
        /// If the attribute is channel-based, this parameter specifies the name of the channel on which to obtain the value of the attribute. If the attribute is not channel-based, then pass VI_NULL or an empty string.
        /// 
        /// Valid Channel Names:  1,2
        /// 
        /// Default Value:  ""
        /// 
        /// </param>
        /// <param name="Scale_Factor">
        /// Returns the current value of the attribute.  Pass the address of a ViInt32 variable.
        /// 
        /// From the function panel window, you can use this control as follows.
        /// 
        /// - If the attribute currently showing in the Attribute ID ring
        ///   control has named constants as valid values, you can view a
        ///   list of the constants by pressing &lt;ENTER&gt; on this control.  
        ///   Select a value by double-clicking on it or by selecting it and 
        ///   then pressing &lt;ENTER&gt;.  
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetPredistortionScale(int Waveform_Handle, out double Scale_Factor)
        {
            int pInvokeResult = PInvoke.GetPredistortionScale(this._handle, Waveform_Handle, out Scale_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the value of a ViInt32 attribute.
        /// 
        /// You can use this function to get the values of instrument-specific attributes and inherent IVI attributes.  If the attribute represents an instrument state, this function performs instrument I/O in the following cases:
        /// 
        /// - State caching is disabled for the entire session or for the particular attribute.
        /// 
        /// - State caching is enabled and the currently cached value is invalid. 
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// If the attribute is channel-based, this parameter specifies the name of the channel on which to obtain the value of the attribute. If the attribute is not channel-based, then pass VI_NULL or an empty string.
        /// 
        /// Valid Channel Names:  1,2
        /// 
        /// Default Value:  ""
        /// 
        /// </param>
        /// <param name="Waveform_Size">
        /// 
        /// </param>
        /// <param name="Waveform_Data">
        /// 
        /// </param>
        /// <param name="Optimum_Scale_Factor">
        /// Returns the current value of the attribute.  Pass the address of a ViInt32 variable.
        /// 
        /// From the function panel window, you can use this control as follows.
        /// 
        /// - If the attribute currently showing in the Attribute ID ring
        ///   control has named constants as valid values, you can view a
        ///   list of the constants by pressing &lt;ENTER&gt; on this control.  
        ///   Select a value by double-clicking on it or by selecting it and 
        ///   then pressing &lt;ENTER&gt;.  
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetOptimumScale(string Channel_Name, int Waveform_Size, double[] Waveform_Data, out double Optimum_Scale_Factor)
        {
            int pInvokeResult = PInvoke.GetOptimumScale(this._handle, Channel_Name, Waveform_Size, Waveform_Data, out Optimum_Scale_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the value of a ViInt32 attribute.
        /// 
        /// You can use this function to get the values of instrument-specific attributes and inherent IVI attributes.  If the attribute represents an instrument state, this function performs instrument I/O in the following cases:
        /// 
        /// - State caching is disabled for the entire session or for the particular attribute.
        /// 
        /// - State caching is enabled and the currently cached value is invalid. 
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// If the attribute is channel-based, this parameter specifies the name of the channel on which to obtain the value of the attribute. If the attribute is not channel-based, then pass VI_NULL or an empty string.
        /// 
        /// Valid Channel Names:  1,2
        /// 
        /// Default Value:  ""
        /// 
        /// </param>
        /// <param name="Waveform_Size">
        /// 
        /// </param>
        /// <param name="Waveform_Data">
        /// 
        /// </param>
        /// <param name="Optimum_Scale_Factor">
        /// Returns the current value of the attribute.  Pass the address of a ViInt32 variable.
        /// 
        /// From the function panel window, you can use this control as follows.
        /// 
        /// - If the attribute currently showing in the Attribute ID ring
        ///   control has named constants as valid values, you can view a
        ///   list of the constants by pressing &lt;ENTER&gt; on this control.  
        ///   Select a value by double-clicking on it or by selecting it and 
        ///   then pressing &lt;ENTER&gt;.  
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetOptimumScaleRaw(string Channel_Name, int Waveform_Size, short[] Waveform_Data, out double Optimum_Scale_Factor)
        {
            int pInvokeResult = PInvoke.GetOptimumScaleRaw(this._handle, Channel_Name, Waveform_Size, Waveform_Data, out Optimum_Scale_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the attributes of the function generator that are related to creating arbitrary sequences.  These attributes are the maximum number of sequences, minimum sequence length, maximum sequence length, and maximum loop count.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Maximum_Number_of_Sequences">
        /// Returns the maximum number of arbitrary waveform sequences that the function generator allows.  The driver obtains this value from the AGN6030A_ATTR_MAX_NUM_SEQUENCES attribute.  
        /// 
        /// Notes:
        /// 
        /// (1) If you do not want to obtain the maximum number of sequences, pass a value of VI_NULL for this parameter.
        /// 
        /// </param>
        /// <param name="Minimum_Sequence_Length">
        /// Returns the minimum number of arbitrary waveforms the function generator allows in a sequence.  The driver obtains this value from the AGN6030A_ATTR_MIN_SEQUENCE_LENGTH attribute.
        /// 
        /// Notes:
        /// 
        /// (1) If you do not want to obtain the minimum sequence length, pass a value of VI_NULL for this parameter. 
        /// 
        /// </param>
        /// <param name="Maximum_Sequence_Length">
        /// Returns the maximum number of arbitrary waveforms the function generator allows in a sequence.  The driver obtains this value from the AGN6030A_ATTR_MAX_SEQUENCE_LENGTH attribute.
        ///  
        /// Notes:
        /// 
        /// (1) If you do not want to obtain the maximum sequence length, pass a value of VI_NULL for this parameter. 
        /// 
        /// </param>
        /// <param name="Maximum_Loop_Count">
        /// Returns the maximum number of times the function generator can repeat an arbitrary waveform in a sequence.  The driver obtains this value from the AGN6030A_ATTR_MAX_LOOP_COUNT attribute.
        /// 
        /// Notes:
        /// 
        /// (1) If you do not want to obtain the maximum loop count, pass a value of VI_NULL for this parameter. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int QueryArbSeqCapabilities(out int Maximum_Number_of_Sequences, out int Minimum_Sequence_Length, out int Maximum_Sequence_Length, out int Maximum_Loop_Count)
        {
            int pInvokeResult = PInvoke.QueryArbSeqCapabilities(this._handle, out Maximum_Number_of_Sequences, out Minimum_Sequence_Length, out Maximum_Sequence_Length, out Maximum_Loop_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// An arbitrary sequence consists of multiple waveforms.  For each waveform, you specify the number of times the function generator produces the waveform before proceeding to the next waveform.  The number of times to repeat a specific waveform is called the loop count.
        ///  
        /// This function creates an arbitrary sequence from an array of waveform handles and an array of corresponding loop counts.  The function returns a handle that identifies the sequence.  You pass this handle to the AGN6030A_ConfigureArbSequence function to specify what arbitrary sequence you want the function generator to produce.
        /// 
        /// Notes:
        /// 
        /// (1) You must set the output mode to AGN6030A_VAL_OUTPUT_SEQ before calling this function.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Sequence_Length">
        /// Pass the number of waveforms in the new arbitrary sequence you want to create.  The value you pass must be between the minimum and maximum sequence lengths the function generator allows.  You can obtain the minimum and maximum sequence lengths from the Minimum Sequence Length and Maximum Sequence Length parameters of the AGN6030A_QueryArbSeqCapabilities function.
        /// 
        /// Valid Range:  2 - approximately 8M or 16M, depending on the amount of memory installed in the arb.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Waveform_Handles_Array">
        /// Pass the array of waveform handles from which you want to create a new arbitrary sequence.  The array must have at least as many elements as the value you specify in the Sequence Length parameter.  Each Waveform Handles array element has a corresponding Loop Counts array element that indicates how many times that waveform is repeated.  You obtain waveform handles when you create arbitrary waveforms with the AGN6030A_CreateArbWaveform function.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Loop_Counts_Array">
        /// Pass the array of loop counts you want to use to create a new arbitrary sequence.  The array must have at least as many elements as the value you specify in the Sequence Length parameter.  Each Loop Counts array element corresponds to a Waveform Handles array element and indicates how many times to repeat that waveform.  Each element of the Loop Count array must be less than or equal to the maximum number of loop counts the function generator allows.  You can obtain the maximum loop count from the Maximum Loop Count parameter of the AGN6030A_QueryArbSeqCapabilities function.
        /// 
        /// 
        /// Valid Range:  1 - 0x100000
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Sequence_Handle">
        /// Returns the handle that identifies the new arbitrary sequence.  You pass this handle to the AGN6030A_ConfigureArbSequence function to generate the arbitrary sequence.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4006  Out of memory.
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int CreateArbSequence(int Sequence_Length, int[] Waveform_Handles_Array, int[] Loop_Counts_Array, out int Sequence_Handle)
        {
            int pInvokeResult = PInvoke.CreateArbSequence(this._handle, Sequence_Length, Waveform_Handles_Array, Loop_Counts_Array, out Sequence_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the attributes of the function generator that affect arbitrary sequence generation.  These attributes are the arbitrary sequence handle, gain, and offset.
        /// 
        /// Notes:
        /// 
        /// (1) You must set the output mode to AGN6030A_VAL_OUTPUT_SEQ before calling this function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Pass the channel name for which you want to configure an arbitrary sequence.
        /// 
        /// Valid Channel Names: 1,2
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Sequence_Handle">
        /// Pass the handle of the arbitrary sequence you want the function generator to produce.  The driver sets the AGN6030A_ATTR_ARB_SEQUENCE_HANDLE attribute to this value.  You create an arbitrary sequence using the AGN6030A_CreateArbSequence function.  The AGN6030A_CreateArbSequence function returns a handle that you use to identify the sequence.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Gain__V_">
        /// Specifies the factor by which the function generator scales the arbitrary waveforms in the sequence.  When you create arbitrary waveforms, you must first normalize the data points to a range of -1.00 to +1.00.  You use this attribute to scale the waveforms in the sequence to other ranges.  The driver sets the AGN6030A_ATTR_ARB_GAIN attribute to this value.  For example, to configure the output signal to range from -2.00 volts to +2.00 volts, set the Gain to 2.00.
        /// 
        /// Units: Volts (V)
        /// 
        /// Valid Range: 0.340 to 0.500 (V) in differential and amplified output modes. 0.170 to 0.250 (V) in single ended output mode.
        /// 
        /// Default Value: 0.340 (V)
        /// 
        /// Default Value: 1.00 (V)
        /// 
        /// </param>
        /// <param name="Offset__V_">
        /// Specifies the value the function generator adds to the arbitrary waveforms in the sequence.  When you create arbitrary waveforms, you must first normalize the data points to a range of -1.00 to +1.00.  You use this parameter to shift the ranges of the arbitrary waveforms in the sequence.  The driver sets the AGN6030A_ATTR_ARB_OFFSET attribute to this value.  For example,  to configure the output signal to range from 0.00 volts to 2.00 volts instead of -1.00 volts to 1.00 volts, set the Offset to 1.00.
        /// 
        /// Units: Volts (V)
        /// 
        /// Valid Range:  is heavily dependent on the current output configuration and gain settings. Use the AGN6030A_ATTR_ARB_OFFSET_MIN/MAX attributes to query the current valid range for this attribute.
        /// 
        /// Default Value: 0.00 (V)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4002  Invalid sequence handle.
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureArbSequence(string Channel_Name, int Sequence_Handle, double Gain__V_, double Offset__V_)
        {
            int pInvokeResult = PInvoke.ConfigureArbSequence(this._handle, Channel_Name, Sequence_Handle, Gain__V_, Offset__V_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function removes a previously created arbitrary sequence from the function generator's memory and invalidates the sequence's handle.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Sequence_Handle">
        /// Pass the handle of the arbitrary sequence you want the function generator to remove.  You create multiple arbitrary sequences using the AGN6030A_CreateArbSequence function.  The AGN6030A_CreateArbSequence function returns a handle that you use to identify each sequence.
        /// 
        /// Defined Values:
        /// AGN6030A_VAL_ALL_SEQUENCES - Remove all sequences from the function generator.
        ///     
        ///  
        /// Default Value: None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4002  Invalid sequence handle.
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ClearArbSequence(int Sequence_Handle)
        {
            int pInvokeResult = PInvoke.ClearArbSequence(this._handle, Sequence_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function removes all previously created arbitrary waveforms and sequences from the function generator's memory. It also invalidates all waveform and sequence handles.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ClearArbMemory()
        {
            int pInvokeResult = PInvoke.ClearArbMemory(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function will return the string name of a sequence, given its handle.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  VI_NULL
        /// 
        /// </param>
        /// <param name="Handle">
        /// This is the sequence handle for which the string name is desired.
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// This indicates the allocated size of the string buffer in which the sequence name is to be returned. It is recommended that this buffer be at least 3 bytes in length.
        /// 
        /// </param>
        /// <param name="Name">
        /// The null-terminated string name of the sequence identified by Handle is returned in the array.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetSeqNameFromHandle(int Handle, int Buffer_Size, System.Text.StringBuilder Name)
        {
            int pInvokeResult = PInvoke.GetSeqNameFromHandle(this._handle, Handle, Buffer_Size, Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function will return the string name of a sequence, given its handle.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  VI_NULL
        /// 
        /// </param>
        /// <param name="Name">
        /// This is the string name of the sequence for which a handle is desired.
        /// 
        /// </param>
        /// <param name="Handle">
        /// The handle corresponding to the named sequence is returned in the first element of this array.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetSeqHandleFromName(System.Text.StringBuilder Name, out int Handle)
        {
            int pInvokeResult = PInvoke.GetSeqHandleFromName(this._handle, Name, out Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function will return the string name of a sequence, given its handle.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  VI_NULL
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// This indicates the allocated size of the Names buffer. It should be large enough to hold the comma-delimited names of all allocated sequences.
        /// 
        /// </param>
        /// <param name="Names">
        /// The names of all sequences, delimited by commas, is returned in this string. The complete list is a null terminated string.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error.  You examine the status code from each call to an instrument driver function to determine if an error occurred. If a positive code is returned, it indicates the buffer size is to small to hold the entire list. The return code is equal to the minimum buffer size required to hold the list.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Buffer too small. 
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetSeqNames(int Buffer_Size, System.Text.StringBuilder Names)
        {
            int pInvokeResult = PInvoke.GetSeqNames(this._handle, Buffer_Size, Names);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// An advanced arbitrary sequence consists of multiple waveforms.  For each waveform, you specify the number of times the function generator produces the waveform before proceeding to the next waveform.  The number of times to repeat a specific waveform is called the loop count.
        /// 
        /// Advanced sequences must also specify the advance mode for each waveform. The advance mode is chosen from the following values:
        /// 
        /// AGN6030A_VAL_WFM_ADV_AUTO - In this mode, the waveform is repeated the specified number of times and play automatically advances to the next waveform in the sequence.
        /// 
        /// AGN6030A_VAL_WFM_ADV_CONTINUOUS - The waveform is repeated continuously (ignoring the specified repeat count) until a waveform advance trigger is received. A waveform advance trigger advances to the next waveform in the sequence.
        /// 
        /// AGN6030A_VAL_WFM_ADV_PLAY_ONE_REP - The waveform is played once and play pauses until a waveform advance trigger is received. Each trigger causes one more repeat of the waveform until the specified number of repeats have been completed. After the final repetition, a waveform advance trigger is required to advance to the next waveform in the sequence.
        /// 
        /// AGN6030A_VAL_WFM_ADV_PLAY_ALL_REPS - All specified repeats are played. Playback then pauses and waits for a waveform advance trigger before moving on to the next waveform in the sequence.
        /// 
        /// In both triggered modes, the waveform will always play at least once before a trigger is waited for.
        /// 
        /// Three markers are generated as part of waveform playback, a start marker, a repeat marker and a gate marker. You can use a binary OR operation enable any combination of these triggers during the playback of a waveform:
        /// 
        /// AGN6030A_VAL_WFM_START_MASK enables a single marker at the start of waveform playback. Waveform repeats do not generate additional marker outputs.
        /// 
        /// AGN6030A_VAL_WFM_REPEAT_MASK enables a marker output at the beginning of every waveform repeat cycle.
        /// 
        /// AGN6030A_VAL_WFM_GATE_MASK enables a marker which is high the entire time a waveform is playing (including repeats).
        /// 
        /// This function creates an advanced arbitrary sequence from an array of waveform handles and arrays of corresponding loop counts, advance modes and marker masks.  The function returns a handle that identifies the sequence.  You use this and other advanced sequence handles in constructing scenarios with the AGN6030A_CreateArbScenario function.
        /// 
        /// Notes:
        /// 
        /// (1) You must set the output mode to AGN6030A_VAL_OUTPUT_ADV_SEQ before calling this function.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Sequence_Length">
        /// Pass the number of waveforms in the new arbitrary sequence you want to create.  The value you pass must be between the minimum and maximum sequence lengths the function generator allows.  You can obtain the minimum and maximum sequence lengths from the Minimum Sequence Length and Maximum Sequence Length parameters of the AGN6030A_QueryArbSeqCapabilities function.
        /// 
        /// Valid Range:  2 - approximately 8M or 16M, depending on the amount of memory installed in the arb.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Waveform_Handles_Array">
        /// Pass the array of waveform handles from which you want to create a new arbitrary sequence.  The array must have at least as many elements as the value you specify in the Sequence Length parameter.  Each Waveform Handles array element has a corresponding Loop Counts array element that indicates how many times that waveform is repeated.  You obtain waveform handles when you create arbitrary waveforms with the AGN6030A_CreateArbWaveform function.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Loop_Counts_Array">
        /// Pass the array of loop counts you want to use to create a new arbitrary sequence.  The array must have at least as many elements as the value you specify in the Sequence Length parameter.  Each Loop Counts array element corresponds to a Waveform Handles array element and indicates how many times to repeat that waveform.  Each element of the Loop Count array must be less than or equal to the maximum number of loop counts the function generator allows.  You can obtain the maximum loop count from the Maximum Loop Count parameter of the AGN6030A_QueryArbSeqCapabilities function.
        /// 
        /// 
        /// Valid Range:  1 - 0x100000
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Advance_Modes_Array">
        /// 
        /// </param>
        /// <param name="Marker_Masks_Array">
        /// 
        /// </param>
        /// <param name="Sequence_Handle">
        /// Returns the handle that identifies the new arbitrary sequence.  You pass this handle to the AGN6030A_ConfigureArbSequence function to generate the arbitrary sequence.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4006  Out of memory.
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int CreateAdvancedSequence(int Sequence_Length, int[] Waveform_Handles_Array, int[] Loop_Counts_Array, string Advance_Modes_Array, string Marker_Masks_Array, out int Sequence_Handle)
        {
            int pInvokeResult = PInvoke.CreateAdvancedSequence(this._handle, Sequence_Length, Waveform_Handles_Array, Loop_Counts_Array, Advance_Modes_Array, Marker_Masks_Array, out Sequence_Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the trigger source.  The function generator responds to a trigger depending on the operation mode in which the function generator is operating.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Pass the channel name for which you want to configure the trigger source.
        /// 
        /// Valid Channel Names: 1,2
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Trigger_Source">
        /// Specify the trigger source you want to use.  The driver sets the
        /// AGN6030A_ATTR_TRIGGER_SOURCE attribute to this
        /// value.
        /// 
        /// After you call the AGN6030A_InitiateGeneration function, the function generator waits for the trigger you specify with this parameter.  After it receives a trigger, the function generator produces an output signal based on the value of the AGN6030A_ATTR_OPERATION_MODE attribute.
        /// 
        /// In addition to the standard IviFgen values, there are five "FLAG" values that can be used to enable more than one trigger source simultaneously. By creating binary OR'ed values from the FLAG values, several input triggers may be enabled at the same time.
        /// 
        /// Valid Values:
        /// AGN6030A_VAL_EXTERNAL      - External input 1 enabled.
        /// AGN6030A_VAL_SOFTWARE_TRIG - Software Trigger Function
        /// AGN6030A_VAL_NOTRIG_FLAG   - All triggers are disabled.
        /// AGN6030A_VAL_SOFTWARE_FLAG - Software trigger included
        /// AGN6030A_VAL_EXTERNAL1_FLAG- External input 1 included
        /// AGN6030A_VAL_EXTERNAL2_FLAG- External input 2 included
        /// AGN6030A_VAL_EXTERNAL3_FLAG- External input 3 included
        /// AGN6030A_VAL_EXTERNAL4_FLAG- External input 4 included
        /// 
        /// Default Value:
        /// AGN6030A_VAL_SOFTWARE_TRIG
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureTriggerSource(string Channel_Name, int Trigger_Source)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerSource(this._handle, Channel_Name, Trigger_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the burst count.  The function generator produces a burst of waveform cycles when it receives a trigger and the AGN6030A_ATTR_OPERATION_MODE attribute is set to AGN6030A_VAL_OPERATE_BURST.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Pass the channel name for which you want to configure the burst count.
        /// 
        /// Valid Channel Names: 1,2
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Burst_Count">
        /// Pass the number of waveform cycles that you want the function generator to produce after it receives a trigger. The driver sets the AGN6030A_ATTR_BURST_COUNT attribute to this value.
        /// 
        /// For standard and arbitrary waveforms, a cycle is one period of the waveform.
        /// 
        /// An arbitrary sequence consists of multiple arbitrary waveforms in a sequence.  Each waveform can be repeated a discrete number of times before the next waveform is produced.  For arbitrary sequences, a cycle is one complete progression through the generation of all iterations of all waveforms in the sequence.
        /// 
        /// Valid Range:  1 - 0x100000
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureBurstCount(string Channel_Name, int Burst_Count)
        {
            int pInvokeResult = PInvoke.ConfigureBurstCount(this._handle, Channel_Name, Burst_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates signal generation.  After you call AGN6030A_init, AGN6030A_InitWithOptions, or AGN6030A_reset, the function generator is producing an output signal.  If you want to abort signal output, call the AGN6030A_AbortGeneration function.  You call this function to cause the function generator to produces a signal again.
        /// 
        /// Notes:
        /// 
        /// (1) This function does not check the instrument status.   Typically, you call this function only in a sequence of calls to other low-level driver functions.  The sequence performs one operation.  You use the low-level functions to optimize one or more aspects of interaction with the instrument.  If you want to check the instrument status, call the AGN6030A_error_query function at the conclusion of the sequence.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int InitiateGeneration()
        {
            int pInvokeResult = PInvoke.InitiateGeneration(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function aborts any previously initiated signal generation.    After you call AGN6030A_init, AGN6030A_InitWithOptions, or AGN6030A_reset, the function generator is producing an output signal.  If you want to abort signal output, call this function.  You call the AGN6030A_InitiateGeneration function to cause the function generator to produces a signal again.
        /// 
        /// Notes:
        /// 
        /// (1) This function does not check the instrument status.  Typically, you call this function only in a sequence of calls to other low-level driver functions.  The sequence performs one operation.  You use the low-level functions to optimize one or more aspects of interaction with the instrument.  If you want to check the instrument status, call the AGN6030A_error_query function at the conclusion of the sequence.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int AbortGeneration()
        {
            int pInvokeResult = PInvoke.AbortGeneration(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sends a command to trigger the function generator.  If the trigger source is not set to AGN6030A_VAL_SOFTWARE_TRIG, this function returns the error AGN6030A_ERROR_TRIGGER_NOT_SOFTWARE.
        /// 
        /// Notes:
        /// 
        /// (1) This function does not check the instrument status.   Typically, you call this function only in a sequence of calls to other low-level driver functions.  The sequence performs one operation.  You use the low-level functions to optimize one or more aspects of interaction with the instrument.  If you want to check the instrument status, call the AGN6030A_error_query function at the conclusion of the sequence.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int SendSoftwareTrigger()
        {
            int pInvokeResult = PInvoke.SendSoftwareTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the instrument to a known state and sends initialization commands to the instrument.  The initialization commands set instrument settings such as Headers Off, Short Command form, and Data Transfer Binary to the state necessary for the operation of the instrument driver.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int reset()
        {
            int pInvokeResult = PInvoke.reset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Copy text from new driver here.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ResetWithDefaults()
        {
            int pInvokeResult = PInvoke.ResetWithDefaults(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function places the instrument in a quiescent state where it has minimal or no impact on the system to which it is connected.
        /// 
        /// The implementation of this function for the N6030A aborts signal generation and disables both output channels.
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int Disable()
        {
            int pInvokeResult = PInvoke.Disable(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Copy text from new driver here.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int InvalidateAllAttributes()
        {
            int pInvokeResult = PInvoke.InvalidateAllAttributes(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the highest-level channel name that corresponds to the specific driver channel string that is in the channel table at an index you specify.  By passing 0 for the buffer size, the caller can ascertain the buffer size required to get the entire channel name string and then call the function again with a sufficiently large buffer.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  VI_NULL
        /// 
        /// </param>
        /// <param name="Index">
        /// A 1-based index into the channel table.
        /// 
        /// Default Value:  1
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the Channel Name parameter.
        /// 
        /// If the channel name, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies BufferSize - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Channel Name buffer parameter.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Name">
        /// CReturns the highest-level channel name that corresponds to the specific driver channel string that is in the channel table at an index you specify..
        /// 
        /// The buffer must contain at least as many elements as the value you specify with the Buffer Size parameter.  If the channel name description, including the terminating NUL byte, contains more bytes than you indicate with the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass 0 for the Buffer Size, you can pass VI_NULL for this parameter.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetChannelName(int Index, int Buffer_Size, System.Text.StringBuilder Name)
        {
            int pInvokeResult = PInvoke.GetChannelName(this._handle, Index, Buffer_Size, Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns frequency response information for the selected channel in its currently configured state. Attributes which affect the result are AGN6030A_ATTR_OUTPUT_CONFIGURATION, AGN6030A_ATTR_OUTPUT_FILTER_ENABLED and AGN6030A_ATTR_OUTPUT_BANDWIDTH.
        /// 
        /// Data returned indicates the channel's frequency response as linear gain -- NOT amplitude corrections. You must invert the gain values to get amplitude correction information.
        /// 
        /// The Array Size argument indicates the allocated size of both the Frequency List and Amplitude List arrays. If Array Size is zero, then the two list arrays may passed as null pointers. If Array Size is too small to hold the frequency response data, only the data that fits is transferred to the list arrays.
        /// 
        /// Upon completion, if no other errors have occurred, a positive status value is returned, indicating the actual number of flatness data points available.
        /// 
        /// One way to use this function is to call it once with the Array Size argument set to zero. Then use the status value returned to allocate frequency and amplitude list arrays and call the function a second time with the newly allocated arrays.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// If the attribute is channel-based, this parameter specifies the name of the channel on which to obtain the value of the attribute. If the attribute is not channel-based, then pass VI_NULL or an empty string.
        /// 
        /// Valid Channel Names:  1,2
        /// 
        /// Default Value:  ""
        /// 
        /// </param>
        /// <param name="Array_Size">
        /// This argument indicates the allocated number of elements in the Frequency List and Amplitude List arrays.
        /// 
        /// </param>
        /// <param name="Frequency_List">
        /// This array holds the frequency data points returned by the function. It must point to an array which is at least as many points as indicated by the Array Size argument. If Array Size is zero, this may be a null pointer.
        /// 
        /// 
        /// </param>
        /// <param name="Amplitude_List">
        /// This array holds the amplitude response data points returned by the function. It must point to an array which is at least as many points as indicated by the Array Size argument. If Array Size is zero, this may be a null pointer.
        /// 
        /// These data points are in units of linear gain and must be inverted to obtain amplitude correction values.
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetChannelFlatness(string Channel_Name, int Array_Size, double[] Frequency_List, out double Amplitude_List)
        {
            int pInvokeResult = PInvoke.GetChannelFlatness(this._handle, Channel_Name, Array_Size, Frequency_List, out Amplitude_List);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function runs the instrument's self test routine and returns the test result(s). 
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Self_Test_Result">
        /// This control contains the value returned from the instrument self test.  Zero means success.  For any other code, see the device's operator's manual.
        /// 
        /// Self-Test Code    Description
        /// ---------------------------------------
        ///    0              Passed self test
        ///    1              Self test failed
        /// 
        /// 
        /// </param>
        /// <param name="Self_Test_Message">
        /// Returns the self-test response string from the instrument. See the device's operation manual for an explanation of the string's contents.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int self_test(out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message)
        {
            int pInvokeResult = PInvoke.self_test(this._handle, out Self_Test_Result, Self_Test_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the revision numbers of the instrument driver and instrument firmware.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Instrument_Driver_Revision">
        /// Returns the instrument driver software revision numbers in the form of a string.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// </param>
        /// <param name="Firmware_Revision">
        /// Returns the instrument firmware revision numbers in the form of a string.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int revision_query(System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision)
        {
            int pInvokeResult = PInvoke.revision_query(this._handle, Instrument_Driver_Revision, Firmware_Revision);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads an error code and a message from the instrument's error queue.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Error_Code">
        /// Returns the error code read from the instrument's error queue.
        /// 
        /// 
        /// </param>
        /// <param name="Error_Message">
        /// Returns the error message string read from the instrument's error message queue.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int error_query(out int Error_Code, System.Text.StringBuilder Error_Message)
        {
            int pInvokeResult = PInvoke.error_query(this._handle, out Error_Code, Error_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function clears the error information for the current execution thread and the IVI session you specify.  If you pass VI_NULL for the Instrument Handle parameter, this function clears the error information only for the current execution thread. 
        /// 
        /// The error information includes a primary error code, secondary error code, and an error elaboration string.  For a particular session, this information is the same as the values held in the following attributes:
        /// 
        /// AGN6030A_ATTR_PRIMARY_ERROR
        /// AGN6030A_ATTR_SECONDARY_ERROR
        /// AGN6030A_ATTR_ERROR_ELABORATION
        /// 
        /// This function sets the primary and secondary error codes to VI_SUCCESS (0), and sets the error elaboration string to "".
        /// 
        /// The IVI Library also maintains this error information separately for each thread.  This is useful if you do not have a session handle to pass to AGN6030A_ClearErrorInfo or AGN6030A_GetErrorInfo, which occurs when a call to AGN6030A_init or AGN6030A_InitWithOptions fails.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ClearErrorInfo()
        {
            int pInvokeResult = PInvoke.ClearErrorInfo(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the coercion information associated with the IVI session.  This function retrieves and clears the oldest instance in which the instrument driver coerced a value you specified to another value.
        /// 
        /// If you set the AGN6030A_ATTR_RECORD_COERCIONS attribute to VI_TRUE, the instrument driver keeps a list of all coercions it makes on ViInt32 or ViReal64 values you pass to instrument driver functions.  You use this function to retrieve information from that list.
        /// 
        /// If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Coercion Record buffer parameter.
        /// 
        /// The function returns an empty string in the Coercion Record parameter if no coercion records remain for the session.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the Coercion Record parameter.
        /// 
        /// If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Coercion Record buffer parameter.
        /// 
        /// Default Value:  None
        /// 
        /// 
        /// </param>
        /// <param name="Coercion_Record">
        /// Returns the next coercion record for the IVI session.  If there are no coercion records, the function returns an empty string.
        /// 
        /// The buffer must contain at least as many elements as the value you specify with the Buffer Size parameter.  If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate with the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// This parameter returns an empty string if no coercion records remain for the session.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// If the current value of the return buffer, including the terminating NUL byte, is larger than the size you indicate in the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetNextCoercionRecord(int Buffer_Size, System.Text.StringBuilder Coercion_Record)
        {
            int pInvokeResult = PInvoke.GetNextCoercionRecord(this._handle, Buffer_Size, Coercion_Record);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the interchangeability warnings associated with the IVI session. It retrieves and clears the oldest instance in which the class driver recorded an interchangeability warning.  Interchangeability warnings indicate that using your application with a different instrument might cause different behavior. You use this function to retrieve interchangeability warnings.
        /// 
        /// The driver performs interchangeability checking when the AGN6030A_ATTR_INTERCHANGE_CHECK attribute is set to VI_TRUE.
        /// 
        /// The function returns an empty string in the Interchange Warning parameter if no interchangeability warnings remain for the session.
        /// 
        /// In general, the instrument driver generates interchangeability warnings when an attribute that affects the behavior of the instrument is in a state that you did not specify.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  VI_NULL
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the Interchange Warning parameter.
        /// 
        /// If the next interchangeability warning string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Interchange Warning buffer parameter.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Warning">
        /// Returns the next interchange warning for the IVI session. If there are no interchange warnings, the function returns an empty  string.
        /// 
        /// The buffer must contain at least as many elements as the value you specify with the Buffer Size parameter. If the next interchangeability warning string, including the terminating NUL byte, contains more bytes than you indicate with the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// This parameter returns an empty string if no interchangeability
        /// warnings remain for the session.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetNextInterchangeWarning(int Buffer_Size, System.Text.StringBuilder Warning)
        {
            int pInvokeResult = PInvoke.GetNextInterchangeWarning(this._handle, Buffer_Size, Warning);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function clears the list of current interchange warnings.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ClearInterchangeWarnings()
        {
            int pInvokeResult = PInvoke.ClearInterchangeWarnings(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// When developing a complex test system that consists of multiple test modules, it is generally a good idea to design the test modules so that they can run in any order.  To do so requires ensuring that each test module completely configures the state of each instrument it uses.  If a particular test module does not completely configure the state of an instrument, the state of the instrument depends on the configuration from a previously executed test module.  If you execute the test modules in a different order, the behavior of the instrument and therefore the entire test module is likely to change.  This change in behavior is generally instrument specific and represents an interchangeability problem.
        /// 
        /// You can use this function to test for such cases.  After you call this function, the interchangeability checking algorithms in the specific driver ignore all previous configuration operations.  By calling this function at the beginning of a test module, you can determine whether the test module has dependencies on the operation of previously executed test modules.
        /// 
        /// This function does not clear the interchangeability warnings from the list of previously recorded interchangeability warnings.  If you want to guarantee that the AGN6030A_GetNextInterchangeWarning function only returns those interchangeability warnings that are generated after calling this function, you must clear the list of interchangeability warnings.  You can clear the interchangeability warnings list by repeatedly calling the AGN6030A_GetNextInterchangeWarning function until no more interchangeability warnings are returned.  If you are not interested in the content of those warnings, you can call the AGN6030A_ClearInterchangeWarnings function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the AGN6030A_init or AGN6030A_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the AGN6030A_error_message function.  To obtain additional information about the error condition, call the AGN6030A_GetErrorInfo function.  To clear the error information from the driver, call the AGN6030A_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFA4005  Internal hardware I/O failure
        /// BFFA4007  Missing sequencer clock.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ResetInterchangeCheck()
        {
            int pInvokeResult = PInvoke.ResetInterchangeCheck(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        public void Dispose()
        {
            this.Dispose(true);
            System.GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if ((this._disposed == false))
            {
                PInvoke.close(this._handle);
                this._handle = System.IntPtr.Zero;
            }
            this._disposed = true;
        }

        public void SetInt32(AGN6030AProperties propertyId, string repeatedCapabilityOrChannel, int val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetInt32(AGN6030AProperties propertyId, int val)
        {
            this.SetInt32(propertyId, "", val);
        }

        public int GetInt32(AGN6030AProperties propertyId, string repeatedCapabilityOrChannel)
        {
            int val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public int GetInt32(AGN6030AProperties propertyId)
        {
            return this.GetInt32(propertyId, "");
        }

        public void SetDouble(AGN6030AProperties propertyId, string repeatedCapabilityOrChannel, double val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetDouble(AGN6030AProperties propertyId, double val)
        {
            this.SetDouble(propertyId, "", val);
        }

        public double GetDouble(AGN6030AProperties propertyId, string repeatedCapabilityOrChannel)
        {
            double val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public double GetDouble(AGN6030AProperties propertyId)
        {
            return this.GetDouble(propertyId, "");
        }

        public void SetBoolean(AGN6030AProperties propertyId, string repeatedCapabilityOrChannel, bool val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), System.Convert.ToUInt16(val)));
        }

        public void SetBoolean(AGN6030AProperties propertyId, bool val)
        {
            this.SetBoolean(propertyId, "", val);
        }

        public bool GetBoolean(AGN6030AProperties propertyId, string repeatedCapabilityOrChannel)
        {
            ushort val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return System.Convert.ToBoolean(val);
        }

        public bool GetBoolean(AGN6030AProperties propertyId)
        {
            return this.GetBoolean(propertyId, "");
        }

        public void SetString(AGN6030AProperties propertyId, string repeatedCapabilityOrChannel, string val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetString(AGN6030AProperties propertyId, string val)
        {
            this.SetString(propertyId, "", val);
        }

        public string GetString(AGN6030AProperties propertyId, string repeatedCapabilityOrChannel)
        {
            System.Text.StringBuilder newVal = new System.Text.StringBuilder(512);
            int size = PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), 512, newVal);
            if ((size < 0))
            {
                PInvoke.ThrowError(this._handle, size);
            }
            else
            {
                if ((size > 0))
                {
                    newVal.Capacity = size;
                    PInvoke.TestForError(this._handle, PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), size, newVal));
                }
            }
            return newVal.ToString();
        }

        public string GetString(AGN6030AProperties propertyId)
        {
            return this.GetString(propertyId, "");
        }

        private class PInvoke
        {

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_init", CallingConvention = CallingConvention.StdCall)]
            public static extern int init(string Resource_Name, ushort ID_Query, ushort Reset_Device, out System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_InitWithOptions", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitWithOptions(string Resource_Name, ushort ID_Query, ushort Reset_Device, string Option_String, out System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureOperationMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOperationMode(System.IntPtr Instrument_Handle, string Channel_Name, int Operation_Mode);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureOutputMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputMode(System.IntPtr Instrument_Handle, int Output_Mode);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureOutputConfiguration", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputConfiguration(System.IntPtr Instrument_Handle, string Channel_Name, int Output_Configuration, ushort Output_Filter_Enabled, double Output_Filter_Bandwidth);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureRefClockSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureRefClockSource(System.IntPtr Instrument_Handle, int Reference_Clock_Source);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureSampleClock", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSampleClock(System.IntPtr Instrument_Handle, int Sample_Clock_Source, double Sample_Clock_Frequency);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureOutputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputImpedance(System.IntPtr Instrument_Handle, string Channel_Name, double Impedance);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureOutputEnabled", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputEnabled(System.IntPtr Instrument_Handle, string Channel_Name, ushort Enabled);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureClockSync", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureClockSync(System.IntPtr Instrument_Handle, ushort Clock_Synchronization_Enabled, int Synchronization_Mode);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureSampleRate", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSampleRate(System.IntPtr Instrument_Handle, double Sample_Rate__Samp_s_);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_QueryArbWfmCapabilities", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryArbWfmCapabilities(System.IntPtr Instrument_Handle, out int Maximum_Number_of_Waveforms, out int Waveform_Quantum, out int Minimum_Waveform_Size, out int Maximum_Waveform_Size);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_CreateArbWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateArbWaveform(System.IntPtr Instrument_Handle, int Waveform_Size, double[] Waveform_Data_Array, out int Waveform_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_CreateArbWaveformWithMarkers", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateArbWaveformWithMarkers(System.IntPtr Instrument_Handle, int Waveform_Size, double[] Waveform_Data_Array, int Marker_Size, string Marker_Data_Array, out int Waveform_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_CreateArbWaveformRaw", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateArbWaveformRaw(System.IntPtr Instrument_Handle, int Waveform_Size, short[] Waveform_Data_Array, int Marker_Size, string Marker_Data_Array, out int Waveform_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureArbWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureArbWaveform(System.IntPtr Instrument_Handle, string Channel_Name, int Waveform_Handle, double Gain__V_, double Offset__V_);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ClearArbWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearArbWaveform(System.IntPtr Instrument_Handle, int Waveform_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetPredistortionScale", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPredistortionScale(System.IntPtr Instrument_Handle, int Waveform_Handle, out double Scale_Factor);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetOptimumScale", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetOptimumScale(System.IntPtr Instrument_Handle, string Channel_Name, int Waveform_Size, double[] Waveform_Data, out double Optimum_Scale_Factor);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetOptimumScaleRaw", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetOptimumScaleRaw(System.IntPtr Instrument_Handle, string Channel_Name, int Waveform_Size, short[] Waveform_Data, out double Optimum_Scale_Factor);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_QueryArbSeqCapabilities", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryArbSeqCapabilities(System.IntPtr Instrument_Handle, out int Maximum_Number_of_Sequences, out int Minimum_Sequence_Length, out int Maximum_Sequence_Length, out int Maximum_Loop_Count);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_CreateArbSequence", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateArbSequence(System.IntPtr Instrument_Handle, int Sequence_Length, int[] Waveform_Handles_Array, int[] Loop_Counts_Array, out int Sequence_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureArbSequence", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureArbSequence(System.IntPtr Instrument_Handle, string Channel_Name, int Sequence_Handle, double Gain__V_, double Offset__V_);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ClearArbSequence", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearArbSequence(System.IntPtr Instrument_Handle, int Sequence_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ClearArbMemory", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearArbMemory(System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetSeqNameFromHandle", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSeqNameFromHandle(System.IntPtr Instrument_Handle, int Handle, int Buffer_Size, System.Text.StringBuilder Name);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetSeqHandleFromName", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSeqHandleFromName(System.IntPtr Instrument_Handle, System.Text.StringBuilder Name, out int Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetSeqNames", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSeqNames(System.IntPtr Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Names);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_CreateAdvancedSequence", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateAdvancedSequence(System.IntPtr Instrument_Handle, int Sequence_Length, int[] Waveform_Handles_Array, int[] Loop_Counts_Array, string Advance_Modes_Array, string Marker_Masks_Array, out int Sequence_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerSource(System.IntPtr Instrument_Handle, string Channel_Name, int Trigger_Source);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ConfigureBurstCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureBurstCount(System.IntPtr Instrument_Handle, string Channel_Name, int Burst_Count);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_InitiateGeneration", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitiateGeneration(System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_AbortGeneration", CallingConvention = CallingConvention.StdCall)]
            public static extern int AbortGeneration(System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_SendSoftwareTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int SendSoftwareTrigger(System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_reset", CallingConvention = CallingConvention.StdCall)]
            public static extern int reset(System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ResetWithDefaults", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetWithDefaults(System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_Disable", CallingConvention = CallingConvention.StdCall)]
            public static extern int Disable(System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_InvalidateAllAttributes", CallingConvention = CallingConvention.StdCall)]
            public static extern int InvalidateAllAttributes(System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetChannelName", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetChannelName(System.IntPtr Instrument_Handle, int Index, int Buffer_Size, System.Text.StringBuilder Name);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetChannelFlatness", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetChannelFlatness(System.IntPtr Instrument_Handle, string Channel_Name, int Array_Size, [In, Out] double[] Frequency_List, out double Amplitude_List);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_self_test", CallingConvention = CallingConvention.StdCall)]
            public static extern int self_test(System.IntPtr Instrument_Handle, out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_revision_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int revision_query(System.IntPtr Instrument_Handle, System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_error_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_query(System.IntPtr Instrument_Handle, out int Error_Code, System.Text.StringBuilder Error_Message);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ClearErrorInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearErrorInfo(System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetNextCoercionRecord", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextCoercionRecord(System.IntPtr Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Coercion_Record);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetNextInterchangeWarning", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextInterchangeWarning(System.IntPtr Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Warning);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ClearInterchangeWarnings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearInterchangeWarnings(System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_ResetInterchangeCheck", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetInterchangeCheck(System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_close", CallingConvention = CallingConvention.StdCall)]
            public static extern int close(System.IntPtr Instrument_Handle);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_error_message", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_message(System.IntPtr Instrument_Handle, int Error_Code, System.Text.StringBuilder Error_Message_2);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViInt32(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, out int Attribute_Value);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViReal64(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, out double Attribute_Value);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViString(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, int Buffer_Size, System.Text.StringBuilder Attribute_Value);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViBoolean(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, out ushort Attribute_Value);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViSession(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, out System.IntPtr Attribute_Value);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetAttrMinMaxViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttrMinMaxViInt32(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, out int Min_Value, out int Max_Value, out ushort Has_Min, out ushort Has_Max);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetAttrMinMaxViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttrMinMaxViReal64(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, out double Min_Value, out double Max_Value, out ushort Has_Min, out ushort Has_Max);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_SetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViInt32(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, int Attribute_Value);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_SetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViReal64(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, double Attribute_Value);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_SetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViString(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, string Attribute_Value);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_SetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViBoolean(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, ushort Attribute_Value);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_SetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViSession(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, System.IntPtr Attribute_Value);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetError", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetError(System.IntPtr Instrument_Handle, out int Error_Code, out int Buffer_Size, System.Text.StringBuilder Description);

            [DllImport("AGN6030A.dll", EntryPoint = "AGN6030A_GetErrorInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetErrorInfo(System.IntPtr Instrument_Handle, out int Primary_Error, out int Secondary_Error, System.Text.StringBuilder Error_Elaboration);


            public static int TestForError(System.IntPtr handle, int status)
            {
                if ((status < 0))
                {
                    PInvoke.ThrowError(handle, status);
                }
                return status;
            }

            public static int ThrowError(System.IntPtr handle, int code)
            {
                int status;
                int secerror;
								int size;

                secerror = PInvoke.GetError(handle, out status, out size, null);
                System.Text.StringBuilder msg = new System.Text.StringBuilder();
								//if ((size >= 0))
								//{
								//    msg.Capacity = size;
								//    PInvoke.GetError(handle, out status, out secerror, msg);
								//}
								msg.Capacity = 1000;
								PInvoke.error_message(handle, code, msg);
                throw new System.Runtime.InteropServices.ExternalException(msg.ToString(), code);
            }
        }
    }

    public class AGN6030AConstants
    {

        public const int OperateContinuous = 0;

        public const int OperateBurst = 1;

        public const int OutputArb = 1;

        public const int OutputSeq = 2;

        public const int ConfigurationDifferential = 0;

        public const int ConfigurationSingleEnded = 1;

        public const int ConfigurationAmplified = 2;

        public const int RefClockInternal = 0;

        public const int RefClockExternal = 1;

        public const int RefClockPxi = 1001;

        public const int ClockInternal = 0;

        public const int ClockExternal = 1;

        public const int SyncMaster = 0;

        public const int SyncSlave = 1;

        public const int External = 1;

        public const int SoftwareTrig = 2;

        public const int NotrigFlag = 0;

        public const int SoftwareFlag = 1;

        public const int External1Flag = 2;

        public const int External2Flag = 4;

        public const int External3Flag = 8;

        public const int External4Flag = 16;

        public const double _250e6 = 250000000;

        public const double _500e6 = 500000000;

        public const double _50_0 = 50;

        public const int OutputAdvSeq = 1001;

        public const int IdSoftware = 0;

        public const int IdAuxPort = 1;

        public const int JumpImmediate = 0;

        public const int JumpEndWfm = 1;

        public const int JumpEndScenario = 2;

        public const int PlayContinuous = 1;

        public const int PlaySingle = 0;

        public const int MarkerOff = 0;

        public const int MarkerSoftware = 1;

        public const int MarkerCh1M1 = 2;

        public const int MarkerCh1M2 = 3;

        public const int MarkerCh2M1 = 4;

        public const int MarkerCh2M2 = 5;

        public const int MarkerScenarioRep = 7;

        public const int MarkerWfmStart = 9;

        public const int MarkerWfmRep = 10;

        public const int MarkerWfmGate = 11;

        public const int MarkerSeqStart = 12;

        public const int MarkerSeqRep = 13;

        public const int MarkerSeqGate = 14;

        public const int MarkerHdwrTrig1 = 22;

        public const int MarkerHdwrTrig2 = 23;

        public const int MarkerHdwrTrig3 = 24;

        public const int MarkerHdwrTrig4 = 25;

        public const int MarkerHdwrAuxTrig = 26;
    }

    public enum AGN6030AProperties
    {

        /// <summary>
        /// System.Boolean
        /// </summary>
        TriggerSyncPolarity = 1150051,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RangeCheck = 1050002,

        /// <summary>
        /// System.Boolean
        /// </summary>
        QueryInstrumentStatus = 1050003,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Cache = 1050004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Simulate = 1050005,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RecordCoercions = 1050006,

        /// <summary>
        /// System.Boolean
        /// </summary>
        InterchangeCheck = 1050021,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverDescription = 1050514,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverPrefix = 1050302,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverVendor = 1050513,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverRevision = 1050551,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMajorVersion = 1050515,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMinorVersion = 1050516,

        /// <summary>
        /// System.String
        /// </summary>
        SupportedInstrumentModels = 1050327,

        /// <summary>
        /// System.String
        /// </summary>
        GroupCapabilities = 1050401,

        /// <summary>
        /// System.Int32
        /// </summary>
        ChannelCount = 1050203,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentManufacturer = 1050511,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentModel = 1050512,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentFirmwareRevision = 1050510,

        /// <summary>
        /// System.String
        /// </summary>
        LogicalName = 1050305,

        /// <summary>
        /// System.String
        /// </summary>
        IoResourceDescriptor = 1050304,

        /// <summary>
        /// System.String
        /// </summary>
        DriverSetup = 1050007,

        /// <summary>
        /// System.Double
        /// </summary>
        ClockFrequency = 1150024,

        /// <summary>
        /// System.Int32
        /// </summary>
        ClockSource = 1150006,

        /// <summary>
        /// System.Int32
        /// </summary>
        OperationMode = 1250005,

        /// <summary>
        /// System.Double
        /// </summary>
        OutputBandwidth = 1150003,

        /// <summary>
        /// System.Int32
        /// </summary>
        OutputConfiguration = 1150005,

        /// <summary>
        /// System.Boolean
        /// </summary>
        OutputEnabled = 1250003,

        /// <summary>
        /// System.Boolean
        /// </summary>
        OutputFilterEnabled = 1150004,

        /// <summary>
        /// System.Double
        /// </summary>
        OutputImpedance = 1250004,

        /// <summary>
        /// System.Int32
        /// </summary>
        OutputMode = 1250001,

        /// <summary>
        /// System.Int32
        /// </summary>
        RefClockSource = 1250002,

        /// <summary>
        /// System.Int32
        /// </summary>
        SyncMode = 1150008,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SyncEnabled = 1150007,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SyncOutEnabled = 1150050,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArbWaveformHandle = 1250201,

        /// <summary>
        /// System.Double
        /// </summary>
        ArbGain = 1250202,

        /// <summary>
        /// System.Double
        /// </summary>
        ArbOffset = 1250203,

        /// <summary>
        /// System.Double
        /// </summary>
        ArbOffsetMax = 1150026,

        /// <summary>
        /// System.Double
        /// </summary>
        ArbOffsetMin = 1150025,

        /// <summary>
        /// System.Double
        /// </summary>
        ArbSampleRate = 1250204,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxNumWaveforms = 1250205,

        /// <summary>
        /// System.Int32
        /// </summary>
        WaveformQuantum = 1250206,

        /// <summary>
        /// System.Int32
        /// </summary>
        MinWaveformSize = 1250207,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PredistortionEnabled = 1150028,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PredistortionAutoscale = 1150037,

        /// <summary>
        /// System.Double
        /// </summary>
        PredistortionScale = 1150029,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PredistortionValid = 1150045,

        /// <summary>
        /// System.Double
        /// </summary>
        PredistortionBandwidth = 1150030,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxWaveformSize = 1250208,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArbSequenceHandle = 1250211,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxNumSequences = 1250212,

        /// <summary>
        /// System.Int32
        /// </summary>
        MinSequenceLength = 1250213,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxSequenceLength = 1250214,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxLoopCount = 1250215,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxNumScenarios = 1150038,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxScenarioLength = 1150040,

        /// <summary>
        /// System.Int32
        /// </summary>
        MinScenarioLength = 1150039,

        /// <summary>
        /// System.Int32
        /// </summary>
        MaxScenarioLoopCount = 1150041,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArbScenarioHandle = 1150042,

        /// <summary>
        /// System.Int32
        /// </summary>
        ScenarioIdSource = 1150009,

        /// <summary>
        /// System.Int32
        /// </summary>
        ScenarioJumpMode = 1150044,

        /// <summary>
        /// System.Int32
        /// </summary>
        ScenarioPlayMode = 1150043,

        /// <summary>
        /// System.Boolean
        /// </summary>
        TriggerPolarity = 1150023,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerDelayQuanta = 1150049,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerDelay = 1150046,

        /// <summary>
        /// System.String
        /// </summary>
        ActiveTrigger = 1150022,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerSource = 1250302,

        /// <summary>
        /// System.Int32
        /// </summary>
        StopTriggerSource = 1150012,

        /// <summary>
        /// System.Int32
        /// </summary>
        HoldTriggerSource = 1150031,

        /// <summary>
        /// System.Int32
        /// </summary>
        ResumeTriggerSource = 1150032,

        /// <summary>
        /// System.Int32
        /// </summary>
        WfmAdvTriggerSource = 1150033,

        /// <summary>
        /// System.Int32
        /// </summary>
        WfmJumpTriggerSource = 1150034,

        /// <summary>
        /// System.Int32
        /// </summary>
        ScenarioAdvTriggerSource = 1150035,

        /// <summary>
        /// System.Int32
        /// </summary>
        ScenarioJumpTriggerSource = 1150036,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerThresholdA = 1150020,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerThresholdB = 1150021,

        /// <summary>
        /// System.Int32
        /// </summary>
        BurstCount = 1250350,

        /// <summary>
        /// System.String
        /// </summary>
        ActiveMarker = 1150017,

        /// <summary>
        /// System.Boolean
        /// </summary>
        MarkerPolarity = 1150027,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerSource = 1150013,

        /// <summary>
        /// System.Double
        /// </summary>
        MarkerDelayQuanta = 1150047,

        /// <summary>
        /// System.Double
        /// </summary>
        MarkerDelay = 1150018,

        /// <summary>
        /// System.Double
        /// </summary>
        MarkerWidthQuanta = 1150048,

        /// <summary>
        /// System.Double
        /// </summary>
        MarkerPulseWidth = 1150019,

        /// <summary>
        /// System.Int32
        /// </summary>
        DdsInterpolationRatio = 1150056,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DdsEnabled = 1150055,

        /// <summary>
        /// System.Double
        /// </summary>
        AwgnAmplitude = 1150054,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AwgnEnabled = 1150053,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentSerialNumber = 1150057,

        /// <summary>
        /// System.Int32
        /// </summary>
        PxiManfId = 1150001,

        /// <summary>
        /// System.Int32
        /// </summary>
        PxiModelCode = 1150002,

        /// <summary>
        /// System.Double
        /// </summary>
        QuietusTemperature = 1150052,
    }
}
